# # 1. https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-python
# # 2. https://docs.github.com/en/actions/use-cases-and-examples/using-containerized-services/creating-postgresql-service-containers
# # 3. https://docs.docker.com/build/ci/github-actions/
# # https://github.com/marketplace/actions/deploy-to-heroku

name: Build and Deploy Code  # Name of the workflow

on:  # Triggers for the workflow
  push:  # Trigger the workflow on push to the repository
  pull_request:  # Trigger the workflow on pull request events

jobs:  # Define the jobs to be executed

  #1st job
  build:
    environment:
      name: testing  # Environment name for this job
    env:  # Environment secrets/variables, populated from GitHub secrets
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    # Service containers to run with `build` job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest  # Specify the OS to run the job
    steps:  # Define the steps for the job
      - name: pulling git repo  # Step to check out the repository
        uses: actions/checkout@v4  # Use the checkout action to pull the code - as this is a common task, already available in the GitHub Actions marketplace

      - name: install Python  # Step to set up Python
        uses: actions/setup-python@v5  # Use the setup-python action - as this is a common task, already available in the GitHub Actions marketplace
        with:
          python-version: "3.12"  # Specify the Python version to use

      - name: check installed python version  # Step to check the installed Python version
        run: python --version  # Command to print the Python version

      - name: update pip  # Step to update pip to the latest version
        run: python -m pip install --upgrade pip  # Command to upgrade pip

      - name: install dependencies  # Step to install dependencies
        run: pip install -r req.txt  # Command to install dependencies from the requirements file

      - name: test with pytest  # Step to run tests with pytest
        run: |  # run multiple commands in a single run step
          pip install pytest  # Command to install pytest
          pytest --disable-warnings -v -s  # Command to run tests using pytest

    # Build Docker Image and Push to Docker Hub
      - name: Login to Docker Hub  # Step to log in to Docker Hub
        uses: docker/login-action@v3  # Use the Docker login action
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx  # Step to set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Use the Docker setup-buildx action

      - name: Build and push  # Step to build and push Docker image
        id: docker_build  # Set an ID for this step
        uses: docker/build-push-action@v6  # Use the Docker build-push action
        with:
          push: true  # Enable pushing the image
          tags: ${{ secrets.DOCKER_USER_NAME }}/fastapi-prod:latest  # Tag for the Docker image
          cache-from: type=local,src=/tmp/.buildx-cache  # Use local cache for build
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max  # Save cache locally

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache (Local Cache)  # Step to move cache as a temporary fix
        run: |
          rm -rf /tmp/.buildx-cache  # Remove old cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache  # Move new cache
      - name: Image Digest  # Step to output the image digest
        run: echo ${{steps.docker_build.outputs.digest}}  # Print the image digest

  # # 2nd job
  # deploy:
  #   runs-on: ubuntu-latest  # Specify the OS to run the job
  #   needs: [build]  # This job depends on the `build` job
  #   environment:
  #     name: production  # Environment name for this job
  #   steps:
  #     - name: pulling git repo  # Step to check out the repository
  #       uses: actions/checkout@v4  # Use the checkout action to pull the code - as this is a common task, already available in the GitHub Actions marketplace
  #     - name: deploying to Heroku  # Step to deploy to Heroku
  #       uses: akhileshns/heroku-deploy@v3.13.15  # Use the Heroku deploy action
  #       with:
  #         heroku_api_key: ${{secrets.HEROKU_API_KEY}}  # Heroku API key from secrets
  #         heroku_app_name: ${{secrets.HEROKU_APP_NAME}}  # Heroku app name from secrets
  #         heroku_email: ${{secrets.HEROKU_EMAIL}}  # Heroku email from secrets

  #     - name: deploy to ubuntu server  # Step to deploy to an Ubuntu server
  #       uses: appleboy/ssh-action@v1.1.0  # Use the SSH action for deployment
  #       with:
  #         host: ${{secrets.PROD_HOST}}  # Production host from secrets
  #         username: ${{secrets.PROD_USERNAME}}  # Production username from secrets
  #         password: ${{secrets.PROD_PASSWORD}}  # Production password from secrets
  #         script: |  # Script to run on the server
  #           cd app/src  # Change directory to app source
  #           git pull  # Pull the latest changes
  #           echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api  # Restart the API service with sudo
  #         # with `echo ${{value}}` we are providing the input password required in `sudo -S`